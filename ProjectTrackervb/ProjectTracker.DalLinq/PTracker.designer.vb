'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="PTracker")>  _
Partial Public Class PTrackerDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAssignment(instance As Assignment)
    End Sub
  Partial Private Sub UpdateAssignment(instance As Assignment)
    End Sub
  Partial Private Sub DeleteAssignment(instance As Assignment)
    End Sub
  Partial Private Sub InsertRole(instance As Role)
    End Sub
  Partial Private Sub UpdateRole(instance As Role)
    End Sub
  Partial Private Sub DeleteRole(instance As Role)
    End Sub
  Partial Private Sub InsertProject(instance As Project)
    End Sub
  Partial Private Sub UpdateProject(instance As Project)
    End Sub
  Partial Private Sub DeleteProject(instance As Project)
    End Sub
  Partial Private Sub InsertResource(instance As Resource)
    End Sub
  Partial Private Sub UpdateResource(instance As Resource)
    End Sub
  Partial Private Sub DeleteResource(instance As Resource)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ProjectTracker.DalLinq.My.MySettings.Default.PTrackerConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Assignments() As System.Data.Linq.Table(Of Assignment)
		Get
			Return Me.GetTable(Of Assignment)
		End Get
	End Property
	
	Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
		Get
			Return Me.GetTable(Of Role)
		End Get
	End Property
	
	Public ReadOnly Property Projects() As System.Data.Linq.Table(Of Project)
		Get
			Return Me.GetTable(Of Project)
		End Get
	End Property
	
	Public ReadOnly Property Resources() As System.Data.Linq.Table(Of Resource)
		Get
			Return Me.GetTable(Of Resource)
		End Get
	End Property
	
	<FunctionAttribute(Name:="dbo.addAssignment")>  _
	Public Function addAssignment(<Parameter(DbType:="UniqueIdentifier")> ByVal projectId As System.Nullable(Of System.Guid), <Parameter(DbType:="Int")> ByVal resourceId As System.Nullable(Of Integer), <Parameter(DbType:="DateTime")> ByVal assigned As System.Nullable(Of Date), <Parameter(DbType:="Int")> ByVal role As System.Nullable(Of Integer), <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), projectId, resourceId, assigned, role, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(4),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.updateRole")>  _
	Public Function updateRole(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Parameter(DbType:="VarChar(50)")> ByVal name As String, <Parameter(DbType:="Timestamp")> ByVal lastChanged As System.Data.Linq.Binary, <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, name, lastChanged, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(3),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.addProject")>  _
	Public Function addProject(<Parameter(DbType:="UniqueIdentifier")> ByVal id As System.Nullable(Of System.Guid), <Parameter(DbType:="VarChar(50)")> ByVal name As String, <Parameter(DbType:="DateTime")> ByVal started As System.Nullable(Of Date), <Parameter(DbType:="DateTime")> ByVal ended As System.Nullable(Of Date), <Parameter(DbType:="VarChar(MAX)")> ByVal description As String, <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, name, started, ended, description, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(5),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.addResource")>  _
	Public Function addResource(<Parameter(DbType:="VarChar(50)")> ByVal lastName As String, <Parameter(DbType:="VarChar(50)")> ByVal firstName As String, <Parameter(DbType:="Int")> ByRef newId As System.Nullable(Of Integer), <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lastName, firstName, newId, newLastChanged)
		newId = CType(result.GetParameterValue(2),System.Nullable(Of Integer))
		newLastChanged = CType(result.GetParameterValue(3),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.addRole")>  _
	Public Function addRole(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Parameter(DbType:="VarChar(50)")> ByVal name As String, <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, name, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(2),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.deleteAssignment")>  _
	Public Function deleteAssignment(<Parameter(DbType:="UniqueIdentifier")> ByVal projectId As System.Nullable(Of System.Guid), <Parameter(DbType:="Int")> ByVal resourceId As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), projectId, resourceId)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.deleteProject")>  _
	Public Function deleteProject(<Parameter(DbType:="UniqueIdentifier")> ByVal id As System.Nullable(Of System.Guid)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.deleteResource")>  _
	Public Function deleteResource(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.deleteRole")>  _
	Public Function deleteRole(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.existsProject")>  _
	Public Function existsProject(<Parameter(DbType:="UniqueIdentifier")> ByVal id As System.Nullable(Of System.Guid)) As ISingleResult(Of existsProjectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of existsProjectResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.existsResource")>  _
	Public Function existsResource(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As ISingleResult(Of existsResourceResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of existsResourceResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.getProject")>  _
	Public Function getProject(<Parameter(DbType:="UniqueIdentifier")> ByVal id As System.Nullable(Of System.Guid)) As ISingleResult(Of getProjectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of getProjectResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.getProjects")>  _
	Public Function getProjects() As ISingleResult(Of getProjectsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of getProjectsResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.getResource")>  _
	Public Function getResource(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As ISingleResult(Of getResourceResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of getResourceResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.getResources")>  _
	Public Function getResources() As ISingleResult(Of getResourcesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of getResourcesResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.getRoles")>  _
	Public Function getRoles() As ISingleResult(Of getRolesResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of getRolesResult))
	End Function
	
	<FunctionAttribute(Name:="dbo.updateAssignment")>  _
	Public Function updateAssignment(<Parameter(DbType:="UniqueIdentifier")> ByVal projectId As System.Nullable(Of System.Guid), <Parameter(DbType:="Int")> ByVal resourceId As System.Nullable(Of Integer), <Parameter(DbType:="DateTime")> ByVal assigned As System.Nullable(Of Date), <Parameter(DbType:="Int")> ByVal role As System.Nullable(Of Integer), <Parameter(DbType:="Timestamp")> ByVal lastChanged As System.Data.Linq.Binary, <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), projectId, resourceId, assigned, role, lastChanged, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(5),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.updateProject")>  _
	Public Function updateProject(<Parameter(DbType:="UniqueIdentifier")> ByVal id As System.Nullable(Of System.Guid), <Parameter(DbType:="VarChar(50)")> ByVal name As String, <Parameter(DbType:="DateTime")> ByVal started As System.Nullable(Of Date), <Parameter(DbType:="DateTime")> ByVal ended As System.Nullable(Of Date), <Parameter(DbType:="VarChar(MAX)")> ByVal description As String, <Parameter(DbType:="Timestamp")> ByVal lastChanged As System.Data.Linq.Binary, <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, name, started, ended, description, lastChanged, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(6),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<FunctionAttribute(Name:="dbo.updateResource")>  _
	Public Function updateResource(<Parameter(DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Parameter(DbType:="VarChar(50)")> ByVal lastName As String, <Parameter(DbType:="VarChar(50)")> ByVal firstName As String, <Parameter(DbType:="Timestamp")> ByVal lastChanged As System.Data.Linq.Binary, <Parameter(DbType:="Timestamp")> ByRef newLastChanged As System.Data.Linq.Binary) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, lastName, firstName, lastChanged, newLastChanged)
		newLastChanged = CType(result.GetParameterValue(4),System.Data.Linq.Binary)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Table(Name:="dbo.Assignments")>  _
Partial Public Class Assignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProjectId As System.Guid
	
	Private _ResourceId As Integer
	
	Private _Assigned As Date
	
	Private _Role As Integer
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Private _Role1 As EntityRef(Of Role)
	
	Private _Project As EntityRef(Of Project)
	
	Private _Resource As EntityRef(Of Resource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProjectIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnProjectIdChanged()
    End Sub
    Partial Private Sub OnResourceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnResourceIdChanged()
    End Sub
    Partial Private Sub OnAssignedChanging(value As Date)
    End Sub
    Partial Private Sub OnAssignedChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    Partial Private Sub OnLastChangedChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLastChangedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Role1 = CType(Nothing, EntityRef(Of Role))
		Me._Project = CType(Nothing, EntityRef(Of Project))
		Me._Resource = CType(Nothing, EntityRef(Of Resource))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProjectId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ProjectId() As System.Guid
		Get
			Return Me._ProjectId
		End Get
		Set
			If ((Me._ProjectId = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProjectIdChanging(value)
				Me.SendPropertyChanging
				Me._ProjectId = value
				Me.SendPropertyChanged("ProjectId")
				Me.OnProjectIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResourceId", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ResourceId() As Integer
		Get
			Return Me._ResourceId
		End Get
		Set
			If ((Me._ResourceId = value)  _
						= false) Then
				If Me._Resource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnResourceIdChanging(value)
				Me.SendPropertyChanging
				Me._ResourceId = value
				Me.SendPropertyChanged("ResourceId")
				Me.OnResourceIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Assigned", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Assigned() As Date
		Get
			Return Me._Assigned
		End Get
		Set
			If ((Me._Assigned = value)  _
						= false) Then
				Me.OnAssignedChanging(value)
				Me.SendPropertyChanging
				Me._Assigned = value
				Me.SendPropertyChanged("Assigned")
				Me.OnAssignedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Role", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Role() As Integer
		Get
			Return Me._Role
		End Get
		Set
			If ((Me._Role = value)  _
						= false) Then
				If Me._Role1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me.OnLastChangedChanging(value)
				Me.SendPropertyChanging
				Me._LastChanged = value
				Me.SendPropertyChanged("LastChanged")
				Me.OnLastChangedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Role_Assignment", Storage:="_Role1", ThisKey:="Role", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Role1() As Role
		Get
			Return Me._Role1.Entity
		End Get
		Set
			Dim previousValue As Role = Me._Role1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Role1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Role1.Entity = Nothing
					previousValue.Assignments.Remove(Me)
				End If
				Me._Role1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Assignments.Add(Me)
					Me._Role = value.Id
				Else
					Me._Role = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Role1")
			End If
		End Set
	End Property
	
	<Association(Name:="Project_Assignment", Storage:="_Project", ThisKey:="ProjectId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Assignments.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Assignments.Add(Me)
					Me._ProjectId = value.Id
				Else
					Me._ProjectId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	<Association(Name:="Resource_Assignment", Storage:="_Resource", ThisKey:="ResourceId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Resource() As Resource
		Get
			Return Me._Resource.Entity
		End Get
		Set
			Dim previousValue As Resource = Me._Resource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Resource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Resource.Entity = Nothing
					previousValue.Assignments.Remove(Me)
				End If
				Me._Resource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Assignments.Add(Me)
					Me._ResourceId = value.Id
				Else
					Me._ResourceId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Resource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Roles")>  _
Partial Public Class Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Private _Assignments As EntitySet(Of Assignment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLastChangedChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLastChangedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Assignments = New EntitySet(Of Assignment)(AddressOf Me.attach_Assignments, AddressOf Me.detach_Assignments)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me.OnLastChangedChanging(value)
				Me.SendPropertyChanging
				Me._LastChanged = value
				Me.SendPropertyChanged("LastChanged")
				Me.OnLastChangedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Role_Assignment", Storage:="_Assignments", ThisKey:="Id", OtherKey:="Role")>  _
	Public Property Assignments() As EntitySet(Of Assignment)
		Get
			Return Me._Assignments
		End Get
		Set
			Me._Assignments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Assignments(ByVal entity As Assignment)
		Me.SendPropertyChanging
		entity.Role1 = Me
	End Sub
	
	Private Sub detach_Assignments(ByVal entity As Assignment)
		Me.SendPropertyChanging
		entity.Role1 = Nothing
	End Sub
End Class

<Table(Name:="dbo.Projects")>  _
Partial Public Class Project
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As System.Guid
	
	Private _Name As String
	
	Private _Started As System.Nullable(Of Date)
	
	Private _Ended As System.Nullable(Of Date)
	
	Private _Description As String
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Private _Assignments As EntitySet(Of Assignment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStartedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartedChanged()
    End Sub
    Partial Private Sub OnEndedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndedChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnLastChangedChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLastChangedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Assignments = New EntitySet(Of Assignment)(AddressOf Me.attach_Assignments, AddressOf Me.detach_Assignments)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As System.Guid
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Started", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Started() As System.Nullable(Of Date)
		Get
			Return Me._Started
		End Get
		Set
			If (Me._Started.Equals(value) = false) Then
				Me.OnStartedChanging(value)
				Me.SendPropertyChanging
				Me._Started = value
				Me.SendPropertyChanged("Started")
				Me.OnStartedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ended", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Ended() As System.Nullable(Of Date)
		Get
			Return Me._Ended
		End Get
		Set
			If (Me._Ended.Equals(value) = false) Then
				Me.OnEndedChanging(value)
				Me.SendPropertyChanging
				Me._Ended = value
				Me.SendPropertyChanged("Ended")
				Me.OnEndedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me.OnLastChangedChanging(value)
				Me.SendPropertyChanging
				Me._LastChanged = value
				Me.SendPropertyChanged("LastChanged")
				Me.OnLastChangedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_Assignment", Storage:="_Assignments", ThisKey:="Id", OtherKey:="ProjectId")>  _
	Public Property Assignments() As EntitySet(Of Assignment)
		Get
			Return Me._Assignments
		End Get
		Set
			Me._Assignments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Assignments(ByVal entity As Assignment)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Assignments(ByVal entity As Assignment)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
End Class

<Table(Name:="dbo.Resources")>  _
Partial Public Class Resource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Private _Assignments As EntitySet(Of Assignment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastChangedChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLastChangedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Assignments = New EntitySet(Of Assignment)(AddressOf Me.attach_Assignments, AddressOf Me.detach_Assignments)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me.OnLastChangedChanging(value)
				Me.SendPropertyChanging
				Me._LastChanged = value
				Me.SendPropertyChanged("LastChanged")
				Me.OnLastChangedChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Resource_Assignment", Storage:="_Assignments", ThisKey:="Id", OtherKey:="ResourceId")>  _
	Public Property Assignments() As EntitySet(Of Assignment)
		Get
			Return Me._Assignments
		End Get
		Set
			Me._Assignments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Assignments(ByVal entity As Assignment)
		Me.SendPropertyChanging
		entity.Resource = Me
	End Sub
	
	Private Sub detach_Assignments(ByVal entity As Assignment)
		Me.SendPropertyChanging
		entity.Resource = Nothing
	End Sub
End Class

Partial Public Class existsProjectResult
	
	Private _Column1 As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Column1", DbType:="Int")>  _
	Public Property Column1() As System.Nullable(Of Integer)
		Get
			Return Me._Column1
		End Get
		Set
			If (Me._Column1.Equals(value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
End Class

Partial Public Class existsResourceResult
	
	Private _Column1 As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Column1", DbType:="Int")>  _
	Public Property Column1() As System.Nullable(Of Integer)
		Get
			Return Me._Column1
		End Get
		Set
			If (Me._Column1.Equals(value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
End Class

Partial Public Class getProjectResult
	
	Private _Id As System.Guid
	
	Private _Name As String
	
	Private _Started As System.Nullable(Of Date)
	
	Private _Ended As System.Nullable(Of Date)
	
	Private _Description As String
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Id() As System.Guid
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Started", DbType:="DateTime")>  _
	Public Property Started() As System.Nullable(Of Date)
		Get
			Return Me._Started
		End Get
		Set
			If (Me._Started.Equals(value) = false) Then
				Me._Started = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ended", DbType:="DateTime")>  _
	Public Property Ended() As System.Nullable(Of Date)
		Get
			Return Me._Ended
		End Get
		Set
			If (Me._Ended.Equals(value) = false) Then
				Me._Ended = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", DbType:="rowversion NOT NULL", CanBeNull:=false)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me._LastChanged = value
			End If
		End Set
	End Property
End Class

Partial Public Class getProjectsResult
	
	Private _Id As System.Guid
	
	Private _Name As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Id() As System.Guid
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
End Class

Partial Public Class getResourceResult
	
	Private _Id As Integer
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", DbType:="rowversion NOT NULL", CanBeNull:=false)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me._LastChanged = value
			End If
		End Set
	End Property
End Class

Partial Public Class getResourcesResult
	
	Private _Id As Integer
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
End Class

Partial Public Class getRolesResult
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _LastChanged As System.Data.Linq.Binary
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastChanged", DbType:="rowversion NOT NULL", CanBeNull:=false)>  _
	Public Property LastChanged() As System.Data.Linq.Binary
		Get
			Return Me._LastChanged
		End Get
		Set
			If (Object.Equals(Me._LastChanged, value) = false) Then
				Me._LastChanged = value
			End If
		End Set
	End Property
End Class
