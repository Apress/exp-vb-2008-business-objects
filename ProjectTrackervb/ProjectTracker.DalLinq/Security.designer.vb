'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Security
	
	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="Security")>  _
	Partial Public Class SecurityDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertRole(instance As Role)
    End Sub
    Partial Private Sub UpdateRole(instance As Role)
    End Sub
    Partial Private Sub DeleteRole(instance As Role)
    End Sub
    Partial Private Sub InsertUser(instance As User)
    End Sub
    Partial Private Sub UpdateUser(instance As User)
    End Sub
    Partial Private Sub DeleteUser(instance As User)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.ProjectTracker.DalLinq.My.MySettings.Default.SecurityConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
			Get
				Return Me.GetTable(Of Role)
			End Get
		End Property
		
		Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
			Get
				Return Me.GetTable(Of User)
			End Get
		End Property
		
		<FunctionAttribute(Name:="dbo.GetUser")>  _
		Public Function GetUser(<Parameter(DbType:="VarChar(20)")> ByVal user As String) As ISingleResult(Of GetUserResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user)
			Return CType(result.ReturnValue,ISingleResult(Of GetUserResult))
		End Function
		
		<FunctionAttribute(Name:="dbo.VerifyCredentials")>  _
		Public Function VerifyCredentials(<Parameter(DbType:="VarChar(20)")> ByVal user As String, <Parameter(DbType:="VarChar(20)")> ByVal pw As String) As ISingleResult(Of VerifyCredentialsResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user, pw)
			Return CType(result.ReturnValue,ISingleResult(Of VerifyCredentialsResult))
		End Function
		
		<FunctionAttribute(Name:="dbo.Login")>  _
		Public Function Login(<Parameter(DbType:="VarChar(20)")> ByVal user As String, <Parameter(DbType:="VarChar(20)")> ByVal pw As String) As ISingleResult(Of LoginResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), user, pw)
			Return CType(result.ReturnValue,ISingleResult(Of LoginResult))
		End Function
	End Class
	
	<Table(Name:="dbo.Roles")>  _
	Partial Public Class Role
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Username As String
		
		Private _Role As String
		
		Private _User As EntityRef(Of User)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._User = CType(Nothing, EntityRef(Of User))
			OnCreated
		End Sub
		
		<Column(Storage:="_Username", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					If Me._User.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
					End If
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Role", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Role() As String
			Get
				Return Me._Role
			End Get
			Set
				If (String.Equals(Me._Role, value) = false) Then
					Me.OnRoleChanging(value)
					Me.SendPropertyChanging
					Me._Role = value
					Me.SendPropertyChanged("Role")
					Me.OnRoleChanged
				End If
			End Set
		End Property
		
		<Association(Name:="User_Role", Storage:="_User", ThisKey:="Username", OtherKey:="Username", IsForeignKey:=true)>  _
		Public Property User() As User
			Get
				Return Me._User.Entity
			End Get
			Set
				Dim previousValue As User = Me._User.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._User.Entity = Nothing
						previousValue.Roles.Remove(Me)
					End If
					Me._User.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Roles.Add(Me)
						Me._Username = value.Username
					Else
						Me._Username = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("User")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.Users")>  _
	Partial Public Class User
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Username As String
		
		Private _Password As String
		
		Private _Roles As EntitySet(Of Role)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Roles = New EntitySet(Of Role)(AddressOf Me.attach_Roles, AddressOf Me.detach_Roles)
			OnCreated
		End Sub
		
		<Column(Storage:="_Username", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Password", DbType:="VarChar(20)")>  _
		Public Property Password() As String
			Get
				Return Me._Password
			End Get
			Set
				If (String.Equals(Me._Password, value) = false) Then
					Me.OnPasswordChanging(value)
					Me.SendPropertyChanging
					Me._Password = value
					Me.SendPropertyChanged("Password")
					Me.OnPasswordChanged
				End If
			End Set
		End Property
		
		<Association(Name:="User_Role", Storage:="_Roles", ThisKey:="Username", OtherKey:="Username")>  _
		Public Property Roles() As EntitySet(Of Role)
			Get
				Return Me._Roles
			End Get
			Set
				Me._Roles.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Roles(ByVal entity As Role)
			Me.SendPropertyChanging
			entity.User = Me
		End Sub
		
		Private Sub detach_Roles(ByVal entity As Role)
			Me.SendPropertyChanging
			entity.User = Nothing
		End Sub
	End Class
	
	Partial Public Class GetUserResult
		
		Private _Username As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Storage:="_Username", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me._Username = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class VerifyCredentialsResult
		
		Private _Username As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Storage:="_Username", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me._Username = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class LoginResult
		
		Private _Username As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Storage:="_Username", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me._Username = value
				End If
			End Set
		End Property
	End Class
End Namespace
